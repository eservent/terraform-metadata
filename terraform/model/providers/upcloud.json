{
  ".schema_version": "2",
  ".sdk_type": "terraform-plugin-sdk-v2",
  "name": "upcloud",
  "type": "provider",
  "version": "v2.5.0",
  "provider": {
    "password": {
      "Type": "String",
      "Required": true,
      "Description": "Password for UpCloud API user",
      "DefaultFunc": "ENV(UPCLOUD_PASSWORD)"
    },
    "retry_max": {
      "Type": "Int",
      "Optional": true,
      "Description": "Maximum number of retries",
      "Default": {
        "Type": "int",
        "Value": "4"
      }
    },
    "retry_wait_max_sec": {
      "Type": "Int",
      "Optional": true,
      "Description": "Maximum time to wait between retries",
      "Default": {
        "Type": "int",
        "Value": "30"
      }
    },
    "retry_wait_min_sec": {
      "Type": "Int",
      "Optional": true,
      "Description": "Minimum time to wait between retries",
      "Default": {
        "Type": "int",
        "Value": "1"
      }
    },
    "username": {
      "Type": "String",
      "Required": true,
      "Description": "UpCloud username with API access",
      "DefaultFunc": "ENV(UPCLOUD_USERNAME)"
    }
  },
  "resources": {
    "upcloud_firewall_rules": {
      "firewall_rule": {
        "Type": "List",
        "Required": true,
        "Description": "A single firewall rule.\n\t\t\t\tIf used, IP address and port ranges must have both start and end values specified. These can be the same value if only one IP address or port number is specified.\n\t\t\t\tSource and destination port numbers can only be set if the protocol is TCP or UDP.\n\t\t\t\tThe ICMP type may only be set if the protocol is ICMP.\n\t\t\t\tTypical firewall rule should have \"action\", \"direction\", \"protocol\", \"family\" and at least one destination/source-address/port range.\n\t\t\t\tThe default rule can be created by providing only \"action\" and \"direction\" attributes. Default rule should be defined last.",
        "MaxItems": 1000,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "action": {
              "Type": "String",
              "Required": true,
              "Description": "Action to take if the rule conditions are met"
            },
            "comment": {
              "Type": "String",
              "Optional": true,
              "Description": "Freeform comment string for the rule"
            },
            "destination_address_end": {
              "Type": "String",
              "Optional": true,
              "Description": "The destination address range ends from this address"
            },
            "destination_address_start": {
              "Type": "String",
              "Optional": true,
              "Description": "The destination address range starts from this address"
            },
            "destination_port_end": {
              "Type": "String",
              "Optional": true,
              "Description": "The destination port range ends from this port number"
            },
            "destination_port_start": {
              "Type": "String",
              "Optional": true,
              "Description": "The destination port range starts from this port number"
            },
            "direction": {
              "Type": "String",
              "Required": true,
              "Description": "The direction of network traffic this rule will be applied to"
            },
            "family": {
              "Type": "String",
              "Optional": true,
              "Description": "The address family of new firewall rule"
            },
            "icmp_type": {
              "Type": "String",
              "Optional": true,
              "Description": "The ICMP type"
            },
            "protocol": {
              "Type": "String",
              "Optional": true,
              "Description": "The protocol this rule will be applied to"
            },
            "source_address_end": {
              "Type": "String",
              "Optional": true,
              "Description": "The source address range ends from this address"
            },
            "source_address_start": {
              "Type": "String",
              "Optional": true,
              "Description": "The source address range starts from this address"
            },
            "source_port_end": {
              "Type": "String",
              "Optional": true,
              "Description": "The source port range ends from this port number"
            },
            "source_port_start": {
              "Type": "String",
              "Optional": true,
              "Description": "The source port range starts from this port number"
            }
          }
        }
      },
      "server_id": {
        "Type": "String",
        "Required": true,
        "Description": "The unique id of the server to be protected the firewall rules"
      }
    },
    "upcloud_floating_ip_address": {
      "access": {
        "Type": "String",
        "Optional": true,
        "Description": "Is address for utility or public network",
        "Default": {
          "Type": "string",
          "Value": "public"
        }
      },
      "family": {
        "Type": "String",
        "Optional": true,
        "Description": "The address family of new IP address",
        "Default": {
          "Type": "string",
          "Value": "IPv4"
        }
      },
      "ip_address": {
        "Type": "String",
        "Description": "An UpCloud assigned IP Address",
        "Computed": true
      },
      "mac_address": {
        "Type": "String",
        "Optional": true,
        "Description": "MAC address of server interface to assign address to"
      },
      "zone": {
        "Type": "String",
        "Optional": true,
        "Description": "Zone of address, required when assigning a detached floating IP address",
        "Computed": true
      }
    },
    "upcloud_loadbalancer": {
      "backends": {
        "Type": "List",
        "Description": "Backends are groups of customer servers whose traffic should be balanced.",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "configured_status": {
        "Type": "String",
        "Optional": true,
        "Description": "The service configured status indicates the service's current intended status. Managed by the customer.",
        "Default": {
          "Type": "string",
          "Value": "started"
        }
      },
      "dns_name": {
        "Type": "String",
        "Description": "DNS name of the load balancer",
        "Computed": true
      },
      "frontends": {
        "Type": "List",
        "Description": "Frontends receive the traffic before dispatching it to the backends.",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the service must be unique within customer account."
      },
      "network": {
        "Type": "String",
        "Required": true,
        "Description": "Private network UUID where traffic will be routed. Must reside in load balancer zone."
      },
      "operational_state": {
        "Type": "String",
        "Description": "The service operational state indicates the service's current operational, effective state. Managed by the system.",
        "Computed": true
      },
      "plan": {
        "Type": "String",
        "Required": true,
        "Description": "Plan which the service will have"
      },
      "resolvers": {
        "Type": "List",
        "Description": "Domain Name Resolvers must be configured in case of customer uses dynamic type members",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "Zone in which the service will be hosted, e.g. `fi-hel1`."
      }
    },
    "upcloud_loadbalancer_backend": {
      "loadbalancer": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer to which the backend is connected."
      },
      "members": {
        "Type": "List",
        "Description": "Backend members receive traffic dispatched from the frontends",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the backend must be unique within the load balancer service."
      },
      "properties": {
        "Type": "List",
        "Optional": true,
        "Description": "Backend properties. Properties can set back to defaults by defining empty `properties {}` block.",
        "Computed": true,
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "health_check_expected_status": {
              "Type": "Int",
              "Optional": true,
              "Description": "Expected HTTP status code returned by the customer application to mark server as healthy. Ignored for tcp type.",
              "Default": {
                "Type": "int",
                "Value": "200"
              }
            },
            "health_check_fall": {
              "Type": "Int",
              "Optional": true,
              "Description": "Sets how many failed health checks are allowed until the backend member is taken off from the rotation.",
              "Default": {
                "Type": "int",
                "Value": "3"
              }
            },
            "health_check_interval": {
              "Type": "Int",
              "Optional": true,
              "Description": "Interval between health checks.",
              "Default": {
                "Type": "int",
                "Value": "10"
              }
            },
            "health_check_rise": {
              "Type": "Int",
              "Optional": true,
              "Description": "Sets how many passing checks there must be before returning the backend member to the rotation.",
              "Default": {
                "Type": "int",
                "Value": "3"
              }
            },
            "health_check_type": {
              "Type": "String",
              "Optional": true,
              "Description": "Health check type.",
              "Default": {
                "Type": "string",
                "Value": "tcp"
              }
            },
            "health_check_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Target path for health check HTTP GET requests. Ignored for tcp type.",
              "Default": {
                "Type": "string",
                "Value": "/"
              }
            },
            "outbound_proxy_protocol": {
              "Type": "String",
              "Optional": true,
              "Description": "Enable outbound proxy protocol by setting the desired version. Empty string disables proxy protocol."
            },
            "sticky_session_cookie_name": {
              "Type": "String",
              "Optional": true,
              "Description": "Sets sticky session cookie name. Empty string disables sticky session."
            },
            "timeout_server": {
              "Type": "Int",
              "Optional": true,
              "Description": "Backend server timeout in seconds.",
              "Default": {
                "Type": "int",
                "Value": "10"
              }
            },
            "timeout_tunnel": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum inactivity time on the client and server side for tunnels in seconds.",
              "Default": {
                "Type": "int",
                "Value": "3600"
              }
            }
          }
        }
      },
      "resolver_name": {
        "Type": "String",
        "Optional": true,
        "Description": "Domain Name Resolver used with dynamic type members."
      }
    },
    "upcloud_loadbalancer_dynamic_backend_member": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer backend to which the member is connected."
      },
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Indicates if the member is enabled. Disabled members are excluded from load balancing.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "ip": {
        "Type": "String",
        "Optional": true,
        "Description": "Optional fallback IP address in case of failure on DNS resolving."
      },
      "max_sessions": {
        "Type": "Int",
        "Required": true,
        "Description": "Maximum number of sessions before queueing."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the member must be unique within the load balancer backend service."
      },
      "port": {
        "Type": "Int",
        "Optional": true,
        "Description": "Server port. Port is optional and can be specified in DNS SRV record.",
        "Default": {
          "Type": "int",
          "Value": "0"
        }
      },
      "weight": {
        "Type": "Int",
        "Required": true,
        "Description": "Used to adjust the server's weight relative to other servers. \n\t\t\t\tAll servers will receive a load proportional to their weight relative to the sum of all weights, so the higher the weight, the higher the load. \n\t\t\t\tA value of 0 means the server will not participate in load balancing but will still accept persistent connections."
      }
    },
    "upcloud_loadbalancer_dynamic_certificate_bundle": {
      "hostnames": {
        "Type": "List",
        "Required": true,
        "Description": "Certificate hostnames.",
        "MaxItems": 100,
        "MinItems": 1,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "key_type": {
        "Type": "String",
        "Required": true,
        "Description": "Private key type (`rsa` / `ecdsa`)."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the bundle must be unique within customer account."
      },
      "not_after": {
        "Type": "String",
        "Description": "The time after which a certificate is no longer valid.",
        "Computed": true
      },
      "not_before": {
        "Type": "String",
        "Description": "The time on which a certificate becomes valid.",
        "Computed": true
      },
      "operational_state": {
        "Type": "String",
        "Description": "The service operational state indicates the service's current operational, effective state. Managed by the system.",
        "Computed": true
      }
    },
    "upcloud_loadbalancer_frontend": {
      "default_backend_name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the default backend where traffic will be routed. Note, default backend can be overwritten in frontend rules."
      },
      "loadbalancer": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer to which the frontend is connected."
      },
      "mode": {
        "Type": "String",
        "Required": true,
        "Description": "When load balancer operating in `tcp` mode it acts as a layer 4 proxy. In `http` mode it acts as a layer 7 proxy."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the frontend must be unique within the load balancer service."
      },
      "port": {
        "Type": "Int",
        "Required": true,
        "Description": "Port to listen incoming requests"
      },
      "properties": {
        "Type": "List",
        "Optional": true,
        "Description": "Frontend properties. Properties can set back to defaults by defining empty `properties {}` block.",
        "Computed": true,
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "inbound_proxy_protocol": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Enable or disable inbound proxy protocol support.",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "timeout_client": {
              "Type": "Int",
              "Optional": true,
              "Description": "Client request timeout in seconds.",
              "Default": {
                "Type": "int",
                "Value": "10"
              }
            }
          }
        }
      },
      "rules": {
        "Type": "List",
        "Description": "Set of frontend rule names",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "tls_configs": {
        "Type": "List",
        "Description": "Set of TLS config names",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "upcloud_loadbalancer_frontend_rule": {
      "actions": {
        "Type": "List",
        "Optional": true,
        "Description": "Set of rule actions.",
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "http_redirect": {
              "Type": "List",
              "Optional": true,
              "Description": "Redirects HTTP requests to specified location or URL schema.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "location": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Target location."
                  }
                }
              }
            },
            "http_return": {
              "Type": "List",
              "Optional": true,
              "Description": "Returns HTTP response with specified HTTP status.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "content_type": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Content type."
                  },
                  "payload": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The payload."
                  },
                  "status": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "HTTP status code."
                  }
                }
              }
            },
            "set_forwarded_headers": {
              "Type": "List",
              "Optional": true,
              "Description": "Adds 'X-Forwarded-For / -Proto / -Port' headers in your forwarded requests",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "active": {
                    "Type": "Bool",
                    "Optional": true,
                    "Default": {
                      "Type": "bool",
                      "Value": "true"
                    }
                  }
                }
              }
            },
            "tcp_reject": {
              "Type": "List",
              "Optional": true,
              "Description": "Terminates a connection.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "active": {
                    "Type": "Bool",
                    "Optional": true,
                    "Default": {
                      "Type": "bool",
                      "Value": "true"
                    }
                  }
                }
              }
            },
            "use_backend": {
              "Type": "List",
              "Optional": true,
              "Description": "Routes traffic to specified `backend`.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "backend_name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The name of the backend where traffic will be routed."
                  }
                }
              }
            }
          }
        }
      },
      "frontend": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer frontend to which the rule is connected."
      },
      "matchers": {
        "Type": "List",
        "Optional": true,
        "Description": "Set of rule matchers. if rule doesn't have matchers, then action applies to all incoming requests.",
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "body_size": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by HTTP request body size.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`equal`, `greater`, `greater_or_equal`, `less`, `less_or_equal`)."
                  },
                  "value": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  }
                }
              }
            },
            "body_size_range": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by range of HTTP request body sizes",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "range_end": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  },
                  "range_start": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  }
                }
              }
            },
            "cookie": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by HTTP cookie value. Cookie name must be provided.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Name of the argument."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "header": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by HTTP header value. Header name must be provided.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Name of the argument."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "host": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by hostname. Header extracted from HTTP Headers or from TLS certificate in case of secured connection.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "value": {
                    "Type": "String",
                    "Required": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "http_method": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by HTTP method.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "value": {
                    "Type": "String",
                    "Required": true,
                    "Description": "String value (`GET`, `HEAD`, `POST`, `PUT`, `PATCH`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`)."
                  }
                }
              }
            },
            "num_members_up": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by number of healthy backend members.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "backend_name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The name of the `backend` which members will be monitored."
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`equal`, `greater`, `greater_or_equal`, `less`, `less_or_equal`)."
                  },
                  "value": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  }
                }
              }
            },
            "path": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by URL path.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "src_ip": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by source IP address.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "value": {
                    "Type": "String",
                    "Required": true,
                    "Description": "IP address. CIDR masks are supported, e.g. `192.168.0.0/24`."
                  }
                }
              }
            },
            "src_port": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by source port number.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`equal`, `greater`, `greater_or_equal`, `less`, `less_or_equal`)."
                  },
                  "value": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  }
                }
              }
            },
            "src_port_range": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by range of source port numbers",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "range_end": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  },
                  "range_start": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "Integer value."
                  }
                }
              }
            },
            "url": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by URL without schema, e.g. `example.com/dashboard`.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "url_param": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by URL query parameter value. Query parameter name must be provided",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "name": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Name of the argument."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            },
            "url_query": {
              "Type": "List",
              "Optional": true,
              "Description": "Matches by URL query string.",
              "MaxItems": 100,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "ignore_case": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Ignore case, default `false`.",
                    "Default": {
                      "Type": "bool",
                      "Value": "false"
                    }
                  },
                  "method": {
                    "Type": "String",
                    "Required": true,
                    "Description": "Match method (`exact`, `substring`, `regexp`, `starts`, `ends`, `domain`, `ip`, `exists`). Matcher with `exists` and `ip` methods must be used without `value` and `ignore_case` fields."
                  },
                  "value": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "String value."
                  }
                }
              }
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the frontend rule must be unique within the load balancer service."
      },
      "priority": {
        "Type": "Int",
        "Required": true,
        "Description": "Rule with the higher priority goes first. Rules with the same priority processed in alphabetical order."
      }
    },
    "upcloud_loadbalancer_frontend_tls_config": {
      "certificate_bundle": {
        "Type": "String",
        "Required": true,
        "Description": "Reference to certificate bundle ID."
      },
      "frontend": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer frontend to which the TLS config is connected."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the TLS config must be unique within service frontend."
      }
    },
    "upcloud_loadbalancer_manual_certificate_bundle": {
      "certificate": {
        "Type": "String",
        "Required": true,
        "Description": "Certificate within base64 string must be in PEM format."
      },
      "intermediates": {
        "Type": "String",
        "Optional": true,
        "Description": "Intermediate certificates within base64 string must be in PEM format."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the bundle must be unique within customer account."
      },
      "not_after": {
        "Type": "String",
        "Description": "The time after which a certificate is no longer valid.",
        "Computed": true
      },
      "not_before": {
        "Type": "String",
        "Description": "The time on which a certificate becomes valid.",
        "Computed": true
      },
      "operational_state": {
        "Type": "String",
        "Description": "The service operational state indicates the service's current operational, effective state. Managed by the system.",
        "Computed": true
      },
      "private_key": {
        "Type": "String",
        "Required": true,
        "Description": "Private key within base64 string must be in PEM format."
      }
    },
    "upcloud_loadbalancer_resolver": {
      "cache_invalid": {
        "Type": "Int",
        "Required": true,
        "Description": "Time in seconds to cache invalid results."
      },
      "cache_valid": {
        "Type": "Int",
        "Required": true,
        "Description": "Time in seconds to cache valid results."
      },
      "loadbalancer": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer to which the resolver is connected."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the resolver must be unique within the service."
      },
      "nameservers": {
        "Type": "List",
        "Required": true,
        "Description": "List of nameserver IP addresses. Nameserver can reside in public internet or in customer private network. \n\t\t\t\tPort is optional, if missing then default 53 will be used.",
        "MaxItems": 10,
        "MinItems": 1,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "retries": {
        "Type": "Int",
        "Required": true,
        "Description": "Number of retries on failure."
      },
      "timeout": {
        "Type": "Int",
        "Required": true,
        "Description": "Timeout for the query in seconds."
      },
      "timeout_retry": {
        "Type": "Int",
        "Required": true,
        "Description": "Timeout for the query retries in seconds."
      }
    },
    "upcloud_loadbalancer_static_backend_member": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the load balancer backend to which the member is connected."
      },
      "enabled": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Indicates if the member is enabled. Disabled members are excluded from load balancing.",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "ip": {
        "Type": "String",
        "Required": true,
        "Description": "Server IP address in the customer private network."
      },
      "max_sessions": {
        "Type": "Int",
        "Required": true,
        "Description": "Maximum number of sessions before queueing."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the member must be unique within the load balancer backend service."
      },
      "port": {
        "Type": "Int",
        "Required": true,
        "Description": "Server port."
      },
      "weight": {
        "Type": "Int",
        "Required": true,
        "Description": "Used to adjust the server's weight relative to other servers. \n\t\t\t\tAll servers will receive a load proportional to their weight relative to the sum of all weights, so the higher the weight, the higher the load. \n\t\t\t\tA value of 0 means the server will not participate in load balancing but will still accept persistent connections."
      }
    },
    "upcloud_managed_database_logical_database": {
      "character_set": {
        "Type": "String",
        "Optional": true,
        "Description": "Default character set for the database (LC_CTYPE)",
        "Computed": true
      },
      "collation": {
        "Type": "String",
        "Optional": true,
        "Description": "Default collation for the database (LC_COLLATE)",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the logical database"
      },
      "service": {
        "Type": "String",
        "Required": true,
        "Description": "Service's UUID for which this user belongs to"
      }
    },
    "upcloud_managed_database_mysql": {
      "components": {
        "Type": "List",
        "Description": "Service component information",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "component": {
              "Type": "String",
              "Description": "Type of the component",
              "Computed": true
            },
            "host": {
              "Type": "String",
              "Description": "Hostname of the component",
              "Computed": true
            },
            "port": {
              "Type": "Int",
              "Description": "Port number of the component",
              "Computed": true
            },
            "route": {
              "Type": "String",
              "Description": "Component network route type",
              "Computed": true
            },
            "usage": {
              "Type": "String",
              "Description": "Usage of the component",
              "Computed": true
            }
          }
        }
      },
      "maintenance_window_dow": {
        "Type": "String",
        "Optional": true,
        "Description": "Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)",
        "Computed": true
      },
      "maintenance_window_time": {
        "Type": "String",
        "Optional": true,
        "Description": "Maintenance window UTC time in hh:mm:ss format",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account"
      },
      "node_states": {
        "Type": "List",
        "Description": "Information about nodes providing the managed service",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "name": {
              "Type": "String",
              "Description": "Name plus a node iteration",
              "Computed": true
            },
            "role": {
              "Type": "String",
              "Description": "Role of the node",
              "Computed": true
            },
            "state": {
              "Type": "String",
              "Description": "State of the node",
              "Computed": true
            }
          }
        }
      },
      "plan": {
        "Type": "String",
        "Required": true,
        "Description": "Service plan to use. This determines how much resources the instance will have"
      },
      "powered": {
        "Type": "Bool",
        "Optional": true,
        "Description": "The administrative power state of the service",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "primary_database": {
        "Type": "String",
        "Description": "Primary database name",
        "Computed": true
      },
      "properties": {
        "Type": "List",
        "Optional": true,
        "Description": "Database Engine properties for MySQL",
        "Computed": true,
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "admin_password": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.",
              "Computed": true
            },
            "admin_username": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom username for admin user. This must be set only when a new service is being created.",
              "Computed": true
            },
            "automatic_utility_network_ip_filter": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Automatic utility network IP Filter",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "backup_hour": {
              "Type": "Int",
              "Optional": true,
              "Description": "The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.",
              "Computed": true
            },
            "backup_minute": {
              "Type": "Int",
              "Optional": true,
              "Description": "The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.",
              "Computed": true
            },
            "binlog_retention_period": {
              "Type": "Int",
              "Optional": true,
              "Description": "The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default for example if using the MySQL Debezium Kafka connector.",
              "Computed": true
            },
            "connect_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "connect_timeout",
              "Computed": true
            },
            "default_time_zone": {
              "Type": "String",
              "Optional": true,
              "Description": "default_time_zone",
              "Computed": true
            },
            "group_concat_max_len": {
              "Type": "Int",
              "Optional": true,
              "Description": "group_concat_max_len",
              "Computed": true
            },
            "information_schema_stats_expiry": {
              "Type": "Int",
              "Optional": true,
              "Description": "information_schema_stats_expiry",
              "Computed": true
            },
            "innodb_ft_min_token_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "innodb_ft_min_token_size",
              "Computed": true
            },
            "innodb_ft_server_stopword_table": {
              "Type": "String",
              "Optional": true,
              "Description": "innodb_ft_server_stopword_table",
              "Computed": true
            },
            "innodb_lock_wait_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "innodb_lock_wait_timeout",
              "Computed": true
            },
            "innodb_log_buffer_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "innodb_log_buffer_size",
              "Computed": true
            },
            "innodb_online_alter_log_max_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "innodb_online_alter_log_max_size",
              "Computed": true
            },
            "innodb_print_all_deadlocks": {
              "Type": "Bool",
              "Optional": true,
              "Description": "innodb_print_all_deadlocks",
              "Computed": true
            },
            "innodb_rollback_on_timeout": {
              "Type": "Bool",
              "Optional": true,
              "Description": "innodb_rollback_on_timeout",
              "Computed": true
            },
            "interactive_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "interactive_timeout",
              "Computed": true
            },
            "internal_tmp_mem_storage_engine": {
              "Type": "String",
              "Optional": true,
              "Description": "internal_tmp_mem_storage_engine",
              "Computed": true
            },
            "ip_filter": {
              "Type": "List",
              "Optional": true,
              "Description": "IP filter",
              "Computed": true,
              "ConfigImplicitMode": "Attr",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "long_query_time": {
              "Type": "Int",
              "Optional": true,
              "Description": "long_query_time",
              "Computed": true
            },
            "max_allowed_packet": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_allowed_packet",
              "Computed": true
            },
            "max_heap_table_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_heap_table_size",
              "Computed": true
            },
            "migration": {
              "Type": "List",
              "Optional": true,
              "Description": "Migrate data from existing server",
              "Computed": true,
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "dbname": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Database name for bootstrapping the initial connection",
                    "Computed": true
                  },
                  "host": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Hostname or IP address of the server where to migrate data from",
                    "Computed": true
                  },
                  "ignore_dbs": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)",
                    "Computed": true
                  },
                  "password": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Password for authentication with the server where to migrate data from",
                    "Computed": true
                  },
                  "port": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "Port number of the server where to migrate data from",
                    "Computed": true
                  },
                  "ssl": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "The server where to migrate data from is secured with SSL",
                    "Default": {
                      "Type": "bool",
                      "Value": "true"
                    }
                  },
                  "username": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "User name for authentication with the server where to migrate data from",
                    "Computed": true
                  }
                }
              }
            },
            "net_read_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "net_read_timeout",
              "Computed": true
            },
            "net_write_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "net_write_timeout",
              "Computed": true
            },
            "public_access": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Public Access",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "slow_query_log": {
              "Type": "Bool",
              "Optional": true,
              "Description": "slow_query_log",
              "Computed": true
            },
            "sort_buffer_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "sort_buffer_size",
              "Computed": true
            },
            "sql_mode": {
              "Type": "String",
              "Optional": true,
              "Description": "sql_mode",
              "Computed": true
            },
            "sql_require_primary_key": {
              "Type": "Bool",
              "Optional": true,
              "Description": "sql_require_primary_key",
              "Computed": true
            },
            "tmp_table_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "tmp_table_size",
              "Computed": true
            },
            "version": {
              "Type": "String",
              "Optional": true,
              "Description": "MySQL major version",
              "Computed": true
            },
            "wait_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "wait_timeout",
              "Computed": true
            }
          }
        }
      },
      "service_host": {
        "Type": "String",
        "Description": "Hostname to the service instance",
        "Computed": true
      },
      "service_password": {
        "Type": "String",
        "Description": "Primary username's password to the service instance",
        "Computed": true
      },
      "service_port": {
        "Type": "String",
        "Description": "Port to the service instance",
        "Computed": true
      },
      "service_uri": {
        "Type": "String",
        "Description": "URI to the service instance",
        "Computed": true
      },
      "service_username": {
        "Type": "String",
        "Description": "Primary username to the service instance",
        "Computed": true
      },
      "state": {
        "Type": "String",
        "Description": "State of the service",
        "Computed": true
      },
      "title": {
        "Type": "String",
        "Optional": true,
        "Description": "Title of a managed database instance"
      },
      "type": {
        "Type": "String",
        "Description": "Type of the service",
        "Computed": true
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "Zone where the instance resides"
      }
    },
    "upcloud_managed_database_postgresql": {
      "components": {
        "Type": "List",
        "Description": "Service component information",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "component": {
              "Type": "String",
              "Description": "Type of the component",
              "Computed": true
            },
            "host": {
              "Type": "String",
              "Description": "Hostname of the component",
              "Computed": true
            },
            "port": {
              "Type": "Int",
              "Description": "Port number of the component",
              "Computed": true
            },
            "route": {
              "Type": "String",
              "Description": "Component network route type",
              "Computed": true
            },
            "usage": {
              "Type": "String",
              "Description": "Usage of the component",
              "Computed": true
            }
          }
        }
      },
      "maintenance_window_dow": {
        "Type": "String",
        "Optional": true,
        "Description": "Maintenance window day of week. Lower case weekday name (monday, tuesday, ...)",
        "Computed": true
      },
      "maintenance_window_time": {
        "Type": "String",
        "Optional": true,
        "Description": "Maintenance window UTC time in hh:mm:ss format",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the service. The name is used as a prefix for the logical hostname. Must be unique within an account"
      },
      "node_states": {
        "Type": "List",
        "Description": "Information about nodes providing the managed service",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "name": {
              "Type": "String",
              "Description": "Name plus a node iteration",
              "Computed": true
            },
            "role": {
              "Type": "String",
              "Description": "Role of the node",
              "Computed": true
            },
            "state": {
              "Type": "String",
              "Description": "State of the node",
              "Computed": true
            }
          }
        }
      },
      "plan": {
        "Type": "String",
        "Required": true,
        "Description": "Service plan to use. This determines how much resources the instance will have"
      },
      "powered": {
        "Type": "Bool",
        "Optional": true,
        "Description": "The administrative power state of the service",
        "Default": {
          "Type": "bool",
          "Value": "true"
        }
      },
      "primary_database": {
        "Type": "String",
        "Description": "Primary database name",
        "Computed": true
      },
      "properties": {
        "Type": "List",
        "Optional": true,
        "Description": "Database Engine properties for PostgreSQL",
        "Computed": true,
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "admin_password": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom password for admin user. Defaults to random string. This must be set only when a new service is being created.",
              "Computed": true
            },
            "admin_username": {
              "Type": "String",
              "Optional": true,
              "Description": "Custom username for admin user. This must be set only when a new service is being created.",
              "Computed": true
            },
            "automatic_utility_network_ip_filter": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Automatic utility network IP Filter",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "autovacuum_analyze_scale_factor": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_analyze_scale_factor",
              "Computed": true
            },
            "autovacuum_analyze_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_analyze_threshold",
              "Computed": true
            },
            "autovacuum_freeze_max_age": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_freeze_max_age",
              "Computed": true
            },
            "autovacuum_max_workers": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_max_workers",
              "Computed": true
            },
            "autovacuum_naptime": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_naptime",
              "Computed": true
            },
            "autovacuum_vacuum_cost_delay": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_vacuum_cost_delay",
              "Computed": true
            },
            "autovacuum_vacuum_cost_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_vacuum_cost_limit",
              "Computed": true
            },
            "autovacuum_vacuum_scale_factor": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_vacuum_scale_factor",
              "Computed": true
            },
            "autovacuum_vacuum_threshold": {
              "Type": "Int",
              "Optional": true,
              "Description": "autovacuum_vacuum_threshold",
              "Computed": true
            },
            "backup_hour": {
              "Type": "Int",
              "Optional": true,
              "Description": "The hour of day (in UTC) when backup for the service is started. New backup is only started if previous backup has already completed.",
              "Computed": true
            },
            "backup_minute": {
              "Type": "Int",
              "Optional": true,
              "Description": "The minute of an hour when backup for the service is started. New backup is only started if previous backup has already completed.",
              "Computed": true
            },
            "bgwriter_delay": {
              "Type": "Int",
              "Optional": true,
              "Description": "bgwriter_delay",
              "Computed": true
            },
            "bgwriter_flush_after": {
              "Type": "Int",
              "Optional": true,
              "Description": "bgwriter_flush_after",
              "Computed": true
            },
            "bgwriter_lru_maxpages": {
              "Type": "Int",
              "Optional": true,
              "Description": "bgwriter_lru_maxpages",
              "Computed": true
            },
            "bgwriter_lru_multiplier": {
              "Type": "Int",
              "Optional": true,
              "Description": "bgwriter_lru_multiplier",
              "Computed": true
            },
            "deadlock_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "deadlock_timeout",
              "Computed": true
            },
            "idle_in_transaction_session_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "idle_in_transaction_session_timeout",
              "Computed": true
            },
            "ip_filter": {
              "Type": "List",
              "Optional": true,
              "Description": "IP filter",
              "Computed": true,
              "ConfigImplicitMode": "Attr",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "jit": {
              "Type": "Bool",
              "Optional": true,
              "Description": "jit",
              "Computed": true
            },
            "log_autovacuum_min_duration": {
              "Type": "Int",
              "Optional": true,
              "Description": "log_autovacuum_min_duration",
              "Computed": true
            },
            "log_error_verbosity": {
              "Type": "String",
              "Optional": true,
              "Description": "log_error_verbosity",
              "Computed": true
            },
            "log_line_prefix": {
              "Type": "String",
              "Optional": true,
              "Description": "log_line_prefix",
              "Computed": true
            },
            "log_min_duration_statement": {
              "Type": "Int",
              "Optional": true,
              "Description": "log_min_duration_statement",
              "Computed": true
            },
            "max_files_per_process": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_files_per_process",
              "Computed": true
            },
            "max_locks_per_transaction": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_locks_per_transaction",
              "Computed": true
            },
            "max_logical_replication_workers": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_logical_replication_workers",
              "Computed": true
            },
            "max_parallel_workers": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_parallel_workers",
              "Computed": true
            },
            "max_parallel_workers_per_gather": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_parallel_workers_per_gather",
              "Computed": true
            },
            "max_pred_locks_per_transaction": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_pred_locks_per_transaction",
              "Computed": true
            },
            "max_prepared_transactions": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_prepared_transactions",
              "Computed": true
            },
            "max_replication_slots": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_replication_slots",
              "Computed": true
            },
            "max_stack_depth": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_stack_depth",
              "Computed": true
            },
            "max_standby_archive_delay": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_standby_archive_delay",
              "Computed": true
            },
            "max_standby_streaming_delay": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_standby_streaming_delay",
              "Computed": true
            },
            "max_wal_senders": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_wal_senders",
              "Computed": true
            },
            "max_worker_processes": {
              "Type": "Int",
              "Optional": true,
              "Description": "max_worker_processes",
              "Computed": true
            },
            "migration": {
              "Type": "List",
              "Optional": true,
              "Description": "Migrate data from existing server",
              "Computed": true,
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "dbname": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Database name for bootstrapping the initial connection",
                    "Computed": true
                  },
                  "host": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Hostname or IP address of the server where to migrate data from",
                    "Computed": true
                  },
                  "ignore_dbs": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)",
                    "Computed": true
                  },
                  "password": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "Password for authentication with the server where to migrate data from",
                    "Computed": true
                  },
                  "port": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "Port number of the server where to migrate data from",
                    "Computed": true
                  },
                  "ssl": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "The server where to migrate data from is secured with SSL",
                    "Default": {
                      "Type": "bool",
                      "Value": "true"
                    }
                  },
                  "username": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "User name for authentication with the server where to migrate data from",
                    "Computed": true
                  }
                }
              }
            },
            "pg_partman_bgw_interval": {
              "Type": "Int",
              "Optional": true,
              "Description": "pg_partman_bgw.interval",
              "Computed": true
            },
            "pg_partman_bgw_role": {
              "Type": "String",
              "Optional": true,
              "Description": "pg_partman_bgw.role",
              "Computed": true
            },
            "pg_read_replica": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Should the service which is being forked be a read replica",
              "Computed": true
            },
            "pg_service_to_fork_from": {
              "Type": "String",
              "Optional": true,
              "Description": "Name of the PG Service from which to fork (deprecated, use service_to_fork_from). This has effect only when a new service is being created.",
              "Computed": true
            },
            "pg_stat_statements_track": {
              "Type": "String",
              "Optional": true,
              "Description": "pg_stat_statements.track",
              "Computed": true
            },
            "pgbouncer": {
              "Type": "List",
              "Optional": true,
              "Description": "PGBouncer connection pooling settings",
              "Computed": true,
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "autodb_idle_timeout": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "If the automatically created database pools have been unused this many seconds, they are freed. If 0 then timeout is disabled. [seconds]",
                    "Computed": true
                  },
                  "autodb_max_db_connections": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "Do not allow more than this many server connections per database (regardless of user). Setting it to 0 means unlimited.",
                    "Computed": true
                  },
                  "autodb_pool_mode": {
                    "Type": "String",
                    "Optional": true,
                    "Description": "PGBouncer pool mode",
                    "Computed": true
                  },
                  "autodb_pool_size": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "If non-zero then create automatically a pool of that size per user when a pool doesn't exist.",
                    "Computed": true
                  },
                  "ignore_startup_parameters": {
                    "Type": "List",
                    "Optional": true,
                    "Description": "List of parameters to ignore when given in startup packet",
                    "Computed": true,
                    "ConfigImplicitMode": "Attr",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  },
                  "min_pool_size": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "Add more server connections to pool if below this number. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.",
                    "Computed": true
                  },
                  "server_idle_timeout": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "If a server connection has been idle more than this many seconds it will be dropped. If 0 then timeout is disabled. [seconds]",
                    "Computed": true
                  },
                  "server_lifetime": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "The pooler will close an unused server connection that has been connected longer than this. [seconds]",
                    "Computed": true
                  },
                  "server_reset_query_always": {
                    "Type": "Bool",
                    "Optional": true,
                    "Description": "Run server_reset_query (DISCARD ALL) in all pooling modes",
                    "Computed": true
                  }
                }
              }
            },
            "pglookout": {
              "Type": "List",
              "Optional": true,
              "Description": "PGLookout settings",
              "Computed": true,
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "max_failover_replication_time_lag": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "max_failover_replication_time_lag",
                    "Default": {
                      "Type": "int",
                      "Value": "60"
                    }
                  }
                }
              }
            },
            "public_access": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Public Access",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "shared_buffers_percentage": {
              "Type": "Int",
              "Optional": true,
              "Description": "shared_buffers_percentage",
              "Computed": true
            },
            "synchronous_replication": {
              "Type": "String",
              "Optional": true,
              "Description": "Synchronous replication type. Note that the service plan also needs to support synchronous replication.",
              "Computed": true
            },
            "temp_file_limit": {
              "Type": "Int",
              "Optional": true,
              "Description": "temp_file_limit",
              "Computed": true
            },
            "timescaledb": {
              "Type": "List",
              "Optional": true,
              "Description": "TimescaleDB extension configuration values",
              "Computed": true,
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "max_background_workers": {
                    "Type": "Int",
                    "Optional": true,
                    "Description": "timescaledb.max_background_workers",
                    "Computed": true
                  }
                }
              }
            },
            "timezone": {
              "Type": "String",
              "Optional": true,
              "Description": "timezone",
              "Computed": true
            },
            "track_activity_query_size": {
              "Type": "Int",
              "Optional": true,
              "Description": "track_activity_query_size",
              "Computed": true
            },
            "track_commit_timestamp": {
              "Type": "String",
              "Optional": true,
              "Description": "track_commit_timestamp",
              "Computed": true
            },
            "track_functions": {
              "Type": "String",
              "Optional": true,
              "Description": "track_functions",
              "Computed": true
            },
            "track_io_timing": {
              "Type": "String",
              "Optional": true,
              "Description": "track_io_timing",
              "Computed": true
            },
            "variant": {
              "Type": "String",
              "Optional": true,
              "Description": "Variant of the PostgreSQL service, may affect the features that are exposed by default",
              "Computed": true
            },
            "version": {
              "Type": "String",
              "Optional": true,
              "Description": "PostgreSQL major version",
              "Computed": true
            },
            "wal_sender_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "wal_sender_timeout",
              "Computed": true
            },
            "wal_writer_delay": {
              "Type": "Int",
              "Optional": true,
              "Description": "wal_writer_delay",
              "Computed": true
            },
            "work_mem": {
              "Type": "Int",
              "Optional": true,
              "Description": "work_mem",
              "Computed": true
            }
          }
        }
      },
      "service_host": {
        "Type": "String",
        "Description": "Hostname to the service instance",
        "Computed": true
      },
      "service_password": {
        "Type": "String",
        "Description": "Primary username's password to the service instance",
        "Computed": true
      },
      "service_port": {
        "Type": "String",
        "Description": "Port to the service instance",
        "Computed": true
      },
      "service_uri": {
        "Type": "String",
        "Description": "URI to the service instance",
        "Computed": true
      },
      "service_username": {
        "Type": "String",
        "Description": "Primary username to the service instance",
        "Computed": true
      },
      "sslmode": {
        "Type": "String",
        "Description": "SSL Connection Mode for PostgreSQL",
        "Computed": true
      },
      "state": {
        "Type": "String",
        "Description": "State of the service",
        "Computed": true
      },
      "title": {
        "Type": "String",
        "Optional": true,
        "Description": "Title of a managed database instance"
      },
      "type": {
        "Type": "String",
        "Description": "Type of the service",
        "Computed": true
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "Zone where the instance resides"
      }
    },
    "upcloud_managed_database_user": {
      "password": {
        "Type": "String",
        "Optional": true,
        "Description": "Password for the database user. Defaults to a random value",
        "Computed": true
      },
      "service": {
        "Type": "String",
        "Required": true,
        "Description": "Service's UUID for which this user belongs to"
      },
      "type": {
        "Type": "String",
        "Description": "Type of the user. Only normal type users can be created",
        "Computed": true
      },
      "username": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the database user"
      }
    },
    "upcloud_network": {
      "ip_network": {
        "Type": "List",
        "Required": true,
        "Description": "A list of IP subnets within the network",
        "MaxItems": 1,
        "MinItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "address": {
              "Type": "String",
              "Required": true,
              "Description": "The CIDR range of the subnet"
            },
            "dhcp": {
              "Type": "Bool",
              "Required": true,
              "Description": "Is DHCP enabled?"
            },
            "dhcp_default_route": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Is the gateway the DHCP default route?",
              "Computed": true
            },
            "dhcp_dns": {
              "Type": "Set",
              "Optional": true,
              "Description": "The DNS servers given by DHCP",
              "Computed": true,
              "ConfigImplicitMode": "Attr",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "family": {
              "Type": "String",
              "Required": true,
              "Description": "IP address family"
            },
            "gateway": {
              "Type": "String",
              "Optional": true,
              "Description": "Gateway address given by DHCP",
              "Computed": true
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "A valid name for the network"
      },
      "router": {
        "Type": "String",
        "Optional": true,
        "Description": "The UUID of a router"
      },
      "type": {
        "Type": "String",
        "Description": "The network type",
        "Computed": true
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "The zone the network is in"
      }
    },
    "upcloud_object_storage": {
      "access_key": {
        "Type": "String",
        "Required": true,
        "Description": "The access key used to identify user.\n\t\t\t\tCan be set to an empty string, which will tell the provider to get the access key from environment variable.\n\t\t\t\tThe environment variable should be \"UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_{name}\".\n\t\t\t\t{name} is the name given to object storage instance (so not the resource label), it should be all uppercased\n\t\t\t\tand all dashes (-) should be replaced with underscores (_). For example, object storage named \"my-files\" would\n\t\t\t\tuse environment variable named \"UPCLOUD_OBJECT_STORAGE_ACCESS_KEY_MY_FILES\"."
      },
      "bucket": {
        "Type": "Set",
        "Optional": true,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "name": {
              "Type": "String",
              "Required": true,
              "Description": "The name of the bucket"
            }
          }
        }
      },
      "created": {
        "Type": "String",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Required": true,
        "Description": "The description of the object storage instance to be created",
        "DefaultFunc": "UNKNOWN"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The name of the object storage instance to be created"
      },
      "secret_key": {
        "Type": "String",
        "Required": true,
        "Description": "The secret key used to authenticate user.\n\t\t\t\tCan be set to an empty string, which will tell the provider to get the secret key from environment variable.\n\t\t\t\tThe environment variable should be \"UPCLOUD_OBJECT_STORAGE_SECRET_KEY_{name}\".\n\t\t\t\t{name} is the name given to object storage instance (so not the resource label), it should be all uppercased\n\t\t\t\tand all dashes (-) should be replaced with underscores (_). For example, object storage named \"my-files\" would\n\t\t\t\tuse environment variable named \"UPCLOUD_OBJECT_STORAGE_SECRET_KEY_MY_FILES\"."
      },
      "size": {
        "Type": "Int",
        "Required": true,
        "Description": "The size of the object storage instance in gigabytes"
      },
      "state": {
        "Type": "String",
        "Computed": true
      },
      "url": {
        "Type": "String",
        "Computed": true
      },
      "used_space": {
        "Type": "Int",
        "Computed": true
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "The zone in which the object storage instance will be created"
      }
    },
    "upcloud_router": {
      "attached_networks": {
        "Type": "List",
        "Description": "A collection of UUID representing networks attached to this router",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the router"
      },
      "type": {
        "Type": "String",
        "Description": "The type of router",
        "Computed": true
      }
    },
    "upcloud_server": {
      "cpu": {
        "Type": "Int",
        "Optional": true,
        "Description": "The number of CPU for the server",
        "Computed": true,
        "ConflictsWith": [
          "plan"
        ]
      },
      "firewall": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Are firewall rules active for the server"
      },
      "host": {
        "Type": "Int",
        "Optional": true,
        "Description": "Use this to start the VM on a specific host. Refers to value from host -attribute. Only available for private cloud hosts"
      },
      "hostname": {
        "Type": "String",
        "Required": true,
        "Description": "A valid domain name"
      },
      "login": {
        "Type": "Set",
        "Optional": true,
        "Description": "Configure access credentials to the server",
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "create_password": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Indicates a password should be create to allow access",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "keys": {
              "Type": "List",
              "Optional": true,
              "Description": "A list of ssh keys to access the server",
              "ConfigImplicitMode": "Attr",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "password_delivery": {
              "Type": "String",
              "Optional": true,
              "Description": "The delivery method for the server’s root password",
              "Default": {
                "Type": "string",
                "Value": "none"
              }
            },
            "user": {
              "Type": "String",
              "Optional": true,
              "Description": "Username to be create to access the server"
            }
          }
        }
      },
      "mem": {
        "Type": "Int",
        "Optional": true,
        "Description": "The size of memory for the server (in megabytes)",
        "Computed": true,
        "ConflictsWith": [
          "plan"
        ]
      },
      "metadata": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Is the metadata service active for the server"
      },
      "network_interface": {
        "Type": "List",
        "Required": true,
        "Description": "One or more blocks describing the network interfaces of the server.",
        "MinItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "bootable": {
              "Type": "Bool",
              "Optional": true,
              "Description": "`true` if this interface should be used for network booting.",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "ip_address": {
              "Type": "String",
              "Optional": true,
              "Description": "The assigned IP address.",
              "Computed": true
            },
            "ip_address_family": {
              "Type": "String",
              "Optional": true,
              "Description": "The IP address type of this interface (one of `IPv4` or `IPv6`).",
              "Default": {
                "Type": "string",
                "Value": "IPv4"
              }
            },
            "ip_address_floating": {
              "Type": "Bool",
              "Description": "`true` is a floating IP address is attached.",
              "Computed": true
            },
            "mac_address": {
              "Type": "String",
              "Description": "The assigned MAC address.",
              "Computed": true
            },
            "network": {
              "Type": "String",
              "Optional": true,
              "Description": "The unique ID of a network to attach this network to.",
              "Computed": true
            },
            "source_ip_filtering": {
              "Type": "Bool",
              "Optional": true,
              "Description": "`true` if source IP should be filtered.",
              "Default": {
                "Type": "bool",
                "Value": "true"
              }
            },
            "type": {
              "Type": "String",
              "Required": true,
              "Description": "Network interface type. For private network interfaces, a network must be specified with an existing network id."
            }
          }
        }
      },
      "plan": {
        "Type": "String",
        "Optional": true,
        "Description": "The pricing plan used for the server",
        "Computed": true
      },
      "simple_backup": {
        "Type": "Set",
        "Optional": true,
        "Description": "Simple backup schedule configuration  \n\t\t\t\tThe idea behind simple backups is to provide a simplified way of backing up *all* of the storages attached to a given server. \n\t\t\t\tThis means you cannot have simple backup set for a server, and then some individual backup_rules on the storages attached to said server. \n\t\t\t\tSuch configuration will throw an error during execution. This also apply to backup_rules set for server templates.  \n\t\t\t\tAlso, due to how UpCloud API works with simple backups and how Terraform orders the update operations, \n\t\t\t\tit is advised to never switch between simple_backup on the server and individual storages backup_rules in one apply.\n\t\t\t\tIf you want to switch from using server simple backup to per-storage defined backup rules, \n\t\t\t\tplease first remove simple_backup block from a server, run 'terraform apply', \n\t\t\t\tthen add backup_rule to desired storages and run 'terraform apply' again.",
        "MaxItems": 1,
        "ConflictsWith": [
          "template.0.backup_rule"
        ],
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "plan": {
              "Type": "String",
              "Required": true,
              "Description": "Simple backup plan. Accepted values: dailies, weeklies, monthlies."
            },
            "time": {
              "Type": "String",
              "Required": true,
              "Description": "Time of the day at which backup will be taken. Should be provided in a hhmm format (e.g. 2230)."
            }
          }
        }
      },
      "storage_devices": {
        "Type": "Set",
        "Optional": true,
        "Description": "A list of storage devices associated with the server",
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "address": {
              "Type": "String",
              "Optional": true,
              "Description": "The device address the storage will be attached to. Specify only the bus name (ide/scsi/virtio) to auto-select next available address from that bus.",
              "Computed": true
            },
            "storage": {
              "Type": "String",
              "Required": true,
              "Description": "A valid storage UUID"
            },
            "type": {
              "Type": "String",
              "Optional": true,
              "Description": "The device type the storage will be attached as",
              "Computed": true
            }
          }
        }
      },
      "tags": {
        "Type": "List",
        "Optional": true,
        "Description": "The server related tags",
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "template": {
        "Type": "List",
        "Optional": true,
        "Description": "Block describing the preconfigured operating system",
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "address": {
              "Type": "String",
              "Optional": true,
              "Description": "The device address the storage will be attached to. Specify only the bus name (ide/scsi/virtio) to auto-select next available address from that bus.",
              "Computed": true
            },
            "backup_rule": {
              "Type": "List",
              "Optional": true,
              "Description": "The criteria to backup the storage  \n\t\tPlease keep in mind that it's not possible to have a server with backup_rule attached to a server with simple_backup specified.\n\t\tSuch configurations will throw errors during execution.  \n\t\tAlso, due to how UpCloud API works with simple backups and how Terraform orders the update operations, \n\t\tit is advised to never switch between simple_backup on the server and individual storages backup_rules in one apply.\n\t\tIf you want to switch from using server simple backup to per-storage defined backup rules, \n\t\tplease first remove simple_backup block from a server, run 'terraform apply', \n\t\tthen add 'backup_rule' to desired storages and run 'terraform apply' again.",
              "MaxItems": 1,
              "IsBlock": true,
              "ConfigImplicitMode": "Block",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "interval": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The weekday when the backup is created"
                  },
                  "retention": {
                    "Type": "Int",
                    "Required": true,
                    "Description": "The number of days before a backup is automatically deleted"
                  },
                  "time": {
                    "Type": "String",
                    "Required": true,
                    "Description": "The time of day when the backup is created"
                  }
                }
              }
            },
            "delete_autoresize_backup": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "filesystem_autoresize": {
              "Type": "Bool",
              "Optional": true,
              "Description": "If set to true, provider will attempt to resize partition and filesystem when the size of template storage changes.\n\t\t\t\t\t\t\tPlease note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used\n\t\t\t\t\t\t\tto restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).\n\t\t\t\t\t\t\tTaking and keeping backups incure costs.",
              "Default": {
                "Type": "bool",
                "Value": "false"
              }
            },
            "id": {
              "Type": "String",
              "Description": "The unique identifier for the storage",
              "Computed": true
            },
            "size": {
              "Type": "Int",
              "Optional": true,
              "Description": "The size of the storage in gigabytes",
              "Computed": true
            },
            "storage": {
              "Type": "String",
              "Required": true,
              "Description": "A valid storage UUID or template name"
            },
            "tier": {
              "Type": "String",
              "Description": "The storage tier to use",
              "Computed": true
            },
            "title": {
              "Type": "String",
              "Optional": true,
              "Description": "A short, informative description",
              "Computed": true
            }
          }
        }
      },
      "title": {
        "Type": "String",
        "Optional": true,
        "Description": "A short, informational description"
      },
      "user_data": {
        "Type": "String",
        "Optional": true,
        "Description": "Defines URL for a server setup script, or the script body itself"
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "The zone in which the server will be hosted"
      }
    },
    "upcloud_storage": {
      "backup_rule": {
        "Type": "List",
        "Optional": true,
        "Description": "The criteria to backup the storage  \n\t\tPlease keep in mind that it's not possible to have a server with backup_rule attached to a server with simple_backup specified.\n\t\tSuch configurations will throw errors during execution.  \n\t\tAlso, due to how UpCloud API works with simple backups and how Terraform orders the update operations, \n\t\tit is advised to never switch between simple_backup on the server and individual storages backup_rules in one apply.\n\t\tIf you want to switch from using server simple backup to per-storage defined backup rules, \n\t\tplease first remove simple_backup block from a server, run 'terraform apply', \n\t\tthen add 'backup_rule' to desired storages and run 'terraform apply' again.",
        "MaxItems": 1,
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "interval": {
              "Type": "String",
              "Required": true,
              "Description": "The weekday when the backup is created"
            },
            "retention": {
              "Type": "Int",
              "Required": true,
              "Description": "The number of days before a backup is automatically deleted"
            },
            "time": {
              "Type": "String",
              "Required": true,
              "Description": "The time of day when the backup is created"
            }
          }
        }
      },
      "clone": {
        "Type": "Set",
        "Optional": true,
        "Description": "Block defining another storage/template to clone to storage",
        "MaxItems": 1,
        "ConflictsWith": [
          "import"
        ],
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "id": {
              "Type": "String",
              "Required": true,
              "Description": "The unique identifier of the storage/template to clone"
            }
          }
        }
      },
      "delete_autoresize_backup": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If set to true, the backup taken before the partition and filesystem resize attempt will be deleted immediately after success.",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "filesystem_autoresize": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If set to true, provider will attempt to resize partition and filesystem when the size of the storage changes.\n\t\t\t\tPlease note that before the resize attempt is made, backup of the storage will be taken. If the resize attempt fails, the backup will be used\n\t\t\t\tto restore the storage and then deleted. If the resize attempt succeeds, backup will be kept (unless delete_autoresize_backup option is set to true).\n\t\t\t\tTaking and keeping backups incure costs.",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "import": {
        "Type": "Set",
        "Optional": true,
        "Description": "Block defining external data to import to storage",
        "MaxItems": 1,
        "ConflictsWith": [
          "clone"
        ],
        "IsBlock": true,
        "ConfigImplicitMode": "Block",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "sha256sum": {
              "Type": "String",
              "Description": "sha256 sum of the imported data",
              "Computed": true
            },
            "source": {
              "Type": "String",
              "Required": true,
              "Description": "The mode of the import task. One of `http_import` or `direct_upload`."
            },
            "source_hash": {
              "Type": "String",
              "Optional": true,
              "Description": "For `direct_upload`; an optional hash of the file to upload."
            },
            "source_location": {
              "Type": "String",
              "Required": true,
              "Description": "The location of the file to import. For `http_import` an accessible URL for `direct_upload` a local file."
            },
            "written_bytes": {
              "Type": "Int",
              "Description": "Number of bytes imported",
              "Computed": true
            }
          }
        }
      },
      "size": {
        "Type": "Int",
        "Required": true,
        "Description": "The size of the storage in gigabytes"
      },
      "tier": {
        "Type": "String",
        "Optional": true,
        "Description": "The storage tier to use",
        "Computed": true
      },
      "title": {
        "Type": "String",
        "Required": true,
        "Description": "A short, informative description"
      },
      "zone": {
        "Type": "String",
        "Required": true,
        "Description": "The zone in which the storage will be created"
      }
    },
    "upcloud_tag": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Free form text representing the meaning of the tag"
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "The value representing the tag"
      },
      "servers": {
        "Type": "Set",
        "Optional": true,
        "Description": "A collection of servers that have been assigned the tag",
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    }
  },
  "data-sources": {
    "upcloud_hosts": {
      "hosts": {
        "Type": "Set",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "description": {
              "Type": "String",
              "Description": "Free form text describing the host",
              "Computed": true
            },
            "host_id": {
              "Type": "Int",
              "Description": "The unique id of the host",
              "Computed": true
            },
            "zone": {
              "Type": "String",
              "Description": "The zone the host is in",
              "Computed": true
            }
          }
        }
      }
    },
    "upcloud_ip_addresses": {
      "addresses": {
        "Type": "Set",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "access": {
              "Type": "String",
              "Description": "Is address for utility or public network",
              "Computed": true
            },
            "address": {
              "Type": "String",
              "Description": "An UpCloud assigned IP Address",
              "Computed": true
            },
            "family": {
              "Type": "String",
              "Description": "IP address family",
              "Computed": true
            },
            "floating": {
              "Type": "Bool",
              "Description": "Does the IP Address represents a floating IP Address",
              "Computed": true
            },
            "mac": {
              "Type": "String",
              "Description": "MAC address of server interface to assign address to",
              "Computed": true
            },
            "part_of_plan": {
              "Type": "Bool",
              "Description": "Is the address a part of a plan",
              "Computed": true
            },
            "ptr_record": {
              "Type": "String",
              "Description": "A reverse DNS record entry",
              "Computed": true
            },
            "server": {
              "Type": "String",
              "Description": "The unique identifier for a server",
              "Computed": true
            },
            "zone": {
              "Type": "String",
              "Description": "Zone of address, required when assigning a detached floating IP address",
              "Computed": true
            }
          }
        }
      }
    },
    "upcloud_networks": {
      "filter_name": {
        "Type": "String",
        "Optional": true,
        "Description": "If specified, results will be filtered to match name using a regular expression"
      },
      "networks": {
        "Type": "Set",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "id": {
              "Type": "String",
              "Description": "The UUID of the network",
              "Computed": true
            },
            "ip_network": {
              "Type": "Set",
              "Description": "A list of IP subnets within the network",
              "Computed": true,
              "IsBlock": true,
              "ConfigImplicitMode": "ComputedBlock",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "address": {
                    "Type": "String",
                    "Description": "The CIDR range of the subnet",
                    "Computed": true
                  },
                  "dhcp": {
                    "Type": "Bool",
                    "Description": "Is DHCP enabled?",
                    "Computed": true
                  },
                  "dhcp_default_route": {
                    "Type": "Bool",
                    "Description": "Is the gateway the DHCP default route?",
                    "Computed": true
                  },
                  "dhcp_dns": {
                    "Type": "List",
                    "Description": "The DNS servers given by DHCP",
                    "Computed": true,
                    "ConfigImplicitMode": "Attr",
                    "Elem": {
                      "Type": "SchemaElements",
                      "ElementsType": "String"
                    }
                  },
                  "family": {
                    "Type": "String",
                    "Description": "IP address family",
                    "Computed": true
                  },
                  "gateway": {
                    "Type": "String",
                    "Description": "Gateway address given by DHCP",
                    "Computed": true
                  }
                }
              }
            },
            "name": {
              "Type": "String",
              "Description": "A valid name for the network",
              "Computed": true
            },
            "servers": {
              "Type": "Set",
              "Description": "A list of attached servers",
              "Computed": true,
              "IsBlock": true,
              "ConfigImplicitMode": "ComputedBlock",
              "Elem": {
                "Type": "SchemaInfo",
                "Info": {
                  "id": {
                    "Type": "String",
                    "Description": "The UUID of the server",
                    "Computed": true
                  },
                  "title": {
                    "Type": "String",
                    "Description": "The short description of the server",
                    "Computed": true
                  }
                }
              }
            },
            "type": {
              "Type": "String",
              "Description": "The network type",
              "Computed": true
            },
            "zone": {
              "Type": "String",
              "Description": "The zone the network is in",
              "Computed": true
            }
          }
        }
      },
      "zone": {
        "Type": "String",
        "Optional": true,
        "Description": "If specified, this data source will return only networks from this zone"
      }
    },
    "upcloud_storage": {
      "access_type": {
        "Type": "String",
        "Optional": true,
        "Description": "Storage access type (public, private)",
        "Computed": true
      },
      "most_recent": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If more than one result is returned, use the most recent storage. This is only useful with private storages. Public storages might give unpredictable results.",
        "Default": {
          "Type": "bool",
          "Value": "false"
        }
      },
      "name": {
        "Type": "String",
        "Optional": true,
        "Description": "Exact name of the storage (same as title)"
      },
      "name_regex": {
        "Type": "String",
        "Optional": true,
        "Description": "Use regular expression to match storage name"
      },
      "size": {
        "Type": "Int",
        "Description": "Size of the storage in gigabytes",
        "Computed": true
      },
      "state": {
        "Type": "String",
        "Description": "Current state of the storage",
        "Computed": true
      },
      "tier": {
        "Type": "String",
        "Description": "Storage tier in use",
        "Computed": true
      },
      "title": {
        "Type": "String",
        "Description": "Title of the storage",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Storage type (normal, backup, cdrom, template). Use 'favorite' as type to filter storages on the list of favorites."
      },
      "zone": {
        "Type": "String",
        "Optional": true,
        "Description": "The zone in which the storage resides",
        "Computed": true
      }
    },
    "upcloud_tags": {
      "tags": {
        "Type": "Set",
        "Computed": true,
        "IsBlock": true,
        "ConfigImplicitMode": "ComputedBlock",
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "description": {
              "Type": "String",
              "Description": "Free form text representing the meaning of the tag",
              "Computed": true
            },
            "name": {
              "Type": "String",
              "Description": "The value representing the tag",
              "Computed": true
            },
            "servers": {
              "Type": "Set",
              "Description": "A collection of servers that have been assigned the tag",
              "Computed": true,
              "ConfigImplicitMode": "Attr",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      }
    },
    "upcloud_zone": {
      "description": {
        "Type": "String",
        "Description": "Meaningful text describing the zone",
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique lablel for the zone"
      },
      "public": {
        "Type": "Bool",
        "Description": "Indicates whether the zone is public",
        "Computed": true
      }
    },
    "upcloud_zones": {
      "filter_type": {
        "Type": "String",
        "Optional": true,
        "Default": {
          "Type": "string",
          "Value": "all"
        }
      },
      "zone_ids": {
        "Type": "Set",
        "Computed": true,
        "ConfigImplicitMode": "Attr",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    }
  }
}